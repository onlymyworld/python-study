

总结

使用模块
	引入模块 import sys
安装第三方模块
	


面向对象编程  OOP[Object Oriented Programming] 
   类和实例
   访问限制
   		如果要让内部属性不被外部访问,可以把属性的名称前加上两个下划线__，在Python中
   		实例的变量名如果以__开头，就变成了一个私有变量，只有内部可以访问,外部不能访问
   		在Python中，变量名类似__xxx__的，也就是以双下划线开头，并且以双下划线结尾的，是
   		特殊变量，特殊变量是可以直接访问的，不是private变量，不能用__name__，__score__这样
   		的变量名
   		对于Python中私有变量在外部怎么访问呢，可以通过_Student__name的方式来访问
   		bart = Student('Bart Simpson',59)
   		bart.get_name() //'Bart Simpson'
   		bart.__name='New Name'
   		bart.__name  //New Name
   		表面上你已经设置成功了__name这个变量，其实这里的__name变量和class内部的__name变量不是一个变量！内部的
   		__name变量已经被Python解释器自动改成了_Student__name，而外部代码给bart新增了一个__name变量
   继承和多态
   		当子类和父类存在相同的run()方法时,我们说,子类的run()覆盖了父类的run(),在代码运行的时候,总是会调用子类的run(),这样，我们就获得了继承的另一个好处：多态
   		判断一个变量是否是某个变量可以用isinstance()判断:

   获取对象信息
   		判断对象类型type()  type(123),type('str'),
   		使用isinstance(),对于class的继承关系来说,使用type()就很不方便，我们要判断class的类型,可以使用isinstance()函数
   		a = Animal()
   		d = Dog()
   		h = Husky()
   		isinstance(h,Husky) //True
   		isinstance()判断的是一个对象是否是该类型本身,或者位于该类型的父继承链上。
   		isinstance(h,Animal)//True
   		因为Husky是从Dog继承下来的,而Dog又是从Animal继承下来的，
   		能用type()判断的基本类型也可以用isinstance()判断
   		isinstance('a',str)
   		isinstance(123,int)
   		isinstance(b'a',bytes)
   		使用dir()
   		如果要获取一个对象的所有属性和方法,可以使用dir()函数，它返回一个包含字符串的list，
   		比如,获得一个str对象的所有属性和方法：
   		dir('abc')
   		getattr(),setattr(),hasattr()，我们可以直接操作一个对象的状态
   		如果试图获取一个不存在的属性,会抛出AttributeError的错误
   		getattr(obj,'z')
   		可以传入一个default的参数,如果属性不存在,就返回默认值
   		getattr(obj,'z',404)

   实例属性和类属性
   		给实例绑定属性的方法时通过实例变量,或者通过self变量
   		但是，如果Student类本身需要绑定一个属性呢？可以直接在class中定义属性,这种属性是类属性,归Student类所有：
   		class Student(object):
   			name='Student'
   		s = Student()
   		s.name  //Student
   		s.name='YueFang'
   		s.name  //YueFang
   		del s.name
   		s.name //Student
面向对象高级编程
	使用__slots__
	使用@property
	多重继承  
	定制类  __str__ __iter__ __getitem__ __getattr__ __call__
	使用枚举类  enum
	使用元类   typ()



